package org.apache.netbeans.core.ui.markdownviewer;

import com.vladsch.flexmark.html.HtmlRenderer;
import com.vladsch.flexmark.parser.Parser;
import com.vladsch.flexmark.util.ast.Node;
import com.vladsch.flexmark.util.data.MutableDataSet;
import java.awt.Dimension;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.IOException;
import org.openide.filesystems.FileChangeAdapter;
import org.openide.filesystems.FileEvent;
import org.openide.filesystems.FileObject;
import org.openide.util.Exceptions;

public class MarkdownViewerVisualPanel extends javax.swing.JPanel {

    private final FileChangeAdapter fileChangeAdapter = new FileChangeAdapter() {
        @Override
        public void fileChanged(FileEvent fe) {
            updateContent(fe.getFile());
        }
    };

    /**
     * Creates new form ReadmeVisualPanel
     */
    public MarkdownViewerVisualPanel(final MarkdownViewerDataObject dataObj) {
        addKeyListener(new KeyListener() {
            @Override
            public void keyTyped(KeyEvent arg0) {
                updateContent(dataObj.getPrimaryFile());
            }

            @Override
            public void keyPressed(KeyEvent arg0) {
                updateContent(dataObj.getPrimaryFile());
            }

            @Override
            public void keyReleased(KeyEvent arg0) {
                updateContent(dataObj.getPrimaryFile());
            }
        });

//        JTextComponent jTextComponent = EditorRegistry.focusedComponent();
//        Document document = jTextComponent.getDocument();

        // TODO: change the size to 50% of the original document
//        setPreferredSize(new Dimension(jTextComponent.getPreferredSize().width / 2, getPreferredSize().height));
        setPreferredSize(new Dimension(500, getPreferredSize().height));

        initComponents();
        updateContent(dataObj.getPrimaryFile());
        dataObj.getPrimaryFile().removeFileChangeListener(fileChangeAdapter);
        dataObj.getPrimaryFile().addFileChangeListener(fileChangeAdapter);
    }

//    @Override
//    public void paintComponent(final Graphics g) {
//        super.paintComponent(g);
//        final Rectangle clip = g.getClipBounds();
//
//        if (clip.y >= 16) {
//            // compensate for scrolling: 
//            //marks on bottom/top edges are not drawn completely 
//            //while scrolling
//            clip.y -= 16;
//            clip.height += 16;
//        }
//    }

    private void updateContent(FileObject fo) {
        if (fo != null) {
            final MutableDataSet options = new MutableDataSet();
            final Parser parser = Parser.builder(options).build();
            final HtmlRenderer renderer = HtmlRenderer.builder(options).build();
            Node document = null;
            try {
                document = parser.parse(fo.asText("UTF-8"));
            } catch (IOException ex) {
                Exceptions.printStackTrace(ex);
            }
            if (document != null) {
                epHtml.setText(renderer.render(document));
            }
        }
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrollPane = new javax.swing.JScrollPane();
        epHtml = new javax.swing.JEditorPane();

        setLayout(new java.awt.BorderLayout());

        epHtml.setEditable(false);
        epHtml.setContentType("text/html; charset=UTF-8"); // NOI18N
        scrollPane.setViewportView(epHtml);

        add(scrollPane, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JEditorPane epHtml;
    private javax.swing.JScrollPane scrollPane;
    // End of variables declaration//GEN-END:variables
}
